allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/releases" }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        maven { url 'https://maven.java.net/content/repositories/snapshots' }
        maven { url 'http://www.allanbank.com/repo/' }
    }
}

subprojects {
    apply plugin: 'java'

    sourceCompatibility = '1.7'
    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    group               = "co.paralleluniverse"
    version             = "0.2.0"
    status              = "integration"
    description         = "Fibers services for web"
    ext.url             = "http://puniverse.github.com/comsat"
    ext.vendor          = "Parallel Universe Software Co."
    ext.licenseName1    = "The GNU Lesser General Public License, version 3"
    ext.licenseUrl1     = "http://www.gnu.org/licenses/lgpl-3.0.txt"
    ext.licenseName2    = "Eclipse Public License - v 1.0"
    ext.licenseUrl2     = "http://www.eclipse.org/legal/epl-v10.html"
    ext.scmUrl          = "https://github.com/puniverse/comsat"
    ext.scmConnection   = "https://github.com/puniverse/comsat.git"
    ext.distDir         = "$buildDir/dist"
    ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

    ext.quasarVer       = "0.6.0"
    ext.jettyVersion    = '9.2.1.v20140609'
    ext.undertowVersion = '1.1.0.Beta5'
    ext.tomcatVersion   = '8.0.9'

    ext.jerseyVersion   = '2.10.1'
    ext.jerseyJettyVersion = '9.1.1.v20140108'

    ext.servletVersion  = '3.0.1'
    ext.jaxrsVersion    = '2.0'
    ext.websocketApiVersion = '1.0'

    ext.dropwizardVer   = '0.7.1'
    ext.jdbiVersion     = '2.55'
    ext.apacheAsyncClientVerstion   = '4.0.1'
    ext.apacheClientVersion         = '4.3.2'

    ext.retrofitVersion = '1.6.1'
    ext.jooqVersion     = '3.4.1'
    ext.slf4jApiVer     = '1.7.7'
    ext.guavaVersion    = '17.0'
    
    ext.mongodbJavaAsyncDriverVersion   = '2.0.0'
    ext.embedMongoVersion               = '1.46.0'

    configurations.all {
        resolutionStrategy {
            failOnVersionConflict()
            force "org.ow2.asm:asm:5.0.3"
            force 'com.codahale.metrics:metrics-core:3.0.2'
            force "com.google.guava:guava:$guavaVersion"
            force "org.slf4j:slf4j-api:$slf4jApiVer"
            force "org.apache.httpcomponents:httpcore:$apacheClientVersion"
            force "javax.servlet:javax.servlet-api:$servletVersion"
        }
    }
    
    if (!project.hasProperty("sonatypeUsername") || !project.hasProperty("sonatypePassword")) {
        //        println "sonatype username or password not set"
        ext.sonatypeUsername = ""
        ext.sonatypePassword = ""
    }
    if (!project.hasProperty('mainClass')) { // must use project.hasProperty() rather than hasProperty in subprojects (gradle bug)
        ext.mainClass = ''
    }

    configurations {
        quasar
        provided
        srcFiles
        markdownDoclet
    }
    
    dependencies {
        compile "com.google.guava:guava:$guavaVersion"
        quasar "co.paralleluniverse:quasar-core:$quasarVer@jar" 
        testCompile group: 'junit', name: 'junit', version: '4.11'
        provided "co.paralleluniverse:quasar-core:$quasarVer"
        provided "javax.servlet:javax.servlet-api:$servletVersion" // was 3.1.0
        markdownDoclet "ch.raffael.pegdown-doclet:pegdown-doclet:1.1.1"
    }
    
    sourceSets {
        main.compileClasspath = main.compileClasspath + configurations.provided
        test.compileClasspath = test.compileClasspath + configurations.provided
        test.runtimeClasspath = test.runtimeClasspath + configurations.provided
    }

    defaultTasks 'install'

    classes {
        doFirst{
            println "Excuting scanSuspendables..."
            ant.taskdef(
                name:'scanSuspendables', classname:'co.paralleluniverse.fibers.instrument.SuspendablesScanner', 
                classpath: "build/classes/main:build/resources/main:${configurations.provided.asPath}:${configurations.runtime.asPath}")
            ant.scanSuspendables(
                auto:false,
                suspendablesFile: "$sourceSets.main.output.resourcesDir/META-INF/suspendables",
                supersFile: "$sourceSets.main.output.resourcesDir/META-INF/suspendable-supers",
                append: true) {
                fileset(dir: sourceSets.main.output.classesDir)
            }
            
//            ant.taskdef(name:'scanSuspendables', 
//                classname:'co.paralleluniverse.fibers.instrument.OldSuspendablesScanner', 
//                classpath: "build/classes/main:${configurations.provided.asPath}:${configurations.runtime.asPath}")
//            ant.scanSuspendables(outputFile:"$sourceSets.main.output.resourcesDir/META-INF/suspendable-supers",
//                suspendablesFile: "$sourceSets.main.output.resourcesDir/META-INF/suspendables"
//            ) {
//                fileset(dir: sourceSets.main.output.classesDir)
//            }
        }
    }
    
    tasks.withType(Test) {
        systemProperty 'co.paralleluniverse.fibers.verifyInstrumentation', 'true'
        jvmArgs "-javaagent:${configurations.quasar.singleFile}" // =v, =d
    }
    
    test {
        beforeTest { desc ->
            logger.quiet("Running test: " + desc)
        }
        
        afterTest { desc, result -> 
            if(result.resultType == TestResult.ResultType.FAILURE) {
                logger.quiet("Failed test ${desc.name} [${desc.className}] with exception: ${result.exception}")
                if(result.exception != null) {
                    result.exception.printStackTrace()
                }
            }
        }
    }
    
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    // Adds license header on each java file. gradle licenseMain for check or licenseFormatMain to apply
    apply plugin: 'license'
    license {
        ignoreFailures true
        header rootProject.file('LICENSE')
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
        strictCheck true
        skipExistingHeaders true
        mapping('java','SLASHSTAR_STYLE')
    }
    
    apply plugin: 'versions'

    //rest of the subprojects definition in the block after subproject specific definitions
}

// Per subproject Defintions
project (':comsat-actors-api') {
    dependencies {
        compile "co.paralleluniverse:quasar-actors:$quasarVer"
    }  
}

//project (':comsat-actors-netty') {
//    dependencies {
//        compile 'org.webbitserver:webbit:0.4.15'
//        compile project (':comsat-actors-api')
//    }
//}

project (':comsat-actors-servlet') {
    dependencies {
        compile project (':comsat-actors-api')
        provided "javax.websocket:javax.websocket-api:$websocketApiVersion"
        provided "javax.servlet:javax.servlet-api:$servletVersion" // was 3.1.0
        testCompile project(':comsat-test-utils')
    }
}

//project (':comsat-actors-undertow') {
//    dependencies {
//        compile 'io.undertow:undertow-core:1.1.0.Beta5'
//        compile project (':comsat-actors-api')
//    }
//}

project (':comsat-dropwizard') {
    dependencies {
        testRuntime 'com.h2database:h2:1.4.180'
        compile "io.dropwizard:dropwizard-core:$dropwizardVer"
        compile "io.dropwizard:dropwizard-client:$dropwizardVer"
        compile "io.dropwizard:dropwizard-jdbi:$dropwizardVer"
        compile project(":comsat-servlet")
        compile (project(":comsat-httpclient")) {
            exclude group: 'org.apache.httpcomponents', module: 'httpclient' 
        }
        compile project(":comsat-jdbi")
        provided "co.paralleluniverse:quasar-core:$quasarVer"
    }
}

project (':comsat-httpclient') {
    dependencies {
        compile "org.apache.httpcomponents:httpclient:4.3.4"
        compile ("org.apache.httpcomponents:httpasyncclient:$apacheAsyncClientVerstion") {
            exclude group: 'org.apache.httpcomponents', module: 'httpclient' 
        }
        testCompile project(':comsat-test-utils')
    }
}

project (':comsat-jax-rs-client') {
    dependencies {
        compile "javax.ws.rs:javax.ws.rs-api:$jaxrsVersion"
        compile "org.glassfish.jersey.core:jersey-client:$jerseyVersion"
        compile "org.glassfish.jersey.connectors:jersey-jetty-connector:$jerseyVersion"
        testCompile (project(':comsat-test-utils')) {
            exclude group: 'org.eclipse.jetty', module: '*' 
        }
        testRuntime "org.eclipse.jetty:jetty-server:$jerseyJettyVersion" 
        testRuntime "org.eclipse.jetty:jetty-servlet:$jerseyJettyVersion"
    }
}

project (':comsat-jdbc') {
    dependencies {
        testCompile project(':comsat-test-utils')
    }

    // AOT instrumentation in order to support jdbc in container
    compileJava {
        doLast {
            println("Instrumenting classes...")
            ant.taskdef(name:'instrumentation', 
                classname:'co.paralleluniverse.fibers.instrument.InstrumentationTask', 
                classpath: "build/classes/main:${configurations.provided.asPath}:${configurations.compile.asPath}")
            ant.instrumentation(verbose:'true', check:'true', debug:'true') {
                fileset(dir: sourceSets.main.output.classesDir) {
                    exclude(name: 'co/paralleluniverse/fibers/instrument/*.class')
                }
            }       
        }
    }
}

project (':comsat-jdbi') {
    dependencies {
        compile "org.jdbi:jdbi:$jdbiVersion"
        compile project (':comsat-jdbc')
        testCompile project(':comsat-test-utils')
    }
}

project (':comsat-jersey-server') {
    dependencies {
        compile project(':comsat-servlet')
        compile 'org.sonatype.sisu.inject:cglib:3.1.1' // instead of old cglib in jersey
        compile ("org.glassfish.jersey.containers:jersey-container-servlet:$jerseyVersion" ) {
            exclude group: 'org.glassfish.hk2.external', module: 'cglib' 
        }
        testCompile project(':comsat-test-utils')
    }
}

project (':comsat-jooq') {
    dependencies {
        compile "org.jooq:jooq:$jooqVersion"
        compile project (':comsat-jdbc')
        testCompile project(':comsat-test-utils')
    }
}

project (':comsat-mongodb-allanbank') {
    dependencies {
        compile "com.allanbank:mongodb-async-driver:$mongodbJavaAsyncDriverVersion"
        testCompile "de.flapdoodle.embed:de.flapdoodle.embed.mongo:$embedMongoVersion"
        testCompile project(':comsat-test-utils')
    }
}

project (':comsat-retrofit') {
    dependencies {
        compile "com.squareup.retrofit:retrofit:$retrofitVersion"
        compile project (':comsat-httpclient')
        testCompile (project (':comsat-dropwizard')) {
            exclude group: 'org.jboss.logging', module: 'jboss-logging'
        }
        testCompile (project(':comsat-test-utils')) {
            exclude group: 'org.eclipse.jetty', module: '*' 
            exclude group: 'org.apache.httpcomponents', module: 'httpclient'
            exclude group: 'org.apache.tomcat', module: 'tomcat-juli'
            //            exclude group: 'org.apache.tomcat', module: 'tomcat-dbcp'
        }
    }
}

project (':comsat-servlet') {
    dependencies {
        testCompile project(':comsat-test-utils')
    }
}

project (':comsat-test-utils') {
    dependencies {
        compile "org.slf4j:slf4j-api:$slf4jApiVer"
        compile "org.apache.httpcomponents:httpclient:4.3.4"
        compile 'com.h2database:h2:1.4.180'
        compile "org.glassfish.jersey.core:jersey-client:$jerseyVersion"
        compile "org.glassfish.jersey.media:jersey-media-sse:$jerseyVersion"
        
        compile "org.eclipse.jetty:jetty-server:$jettyVersion"
        compile "org.eclipse.jetty:jetty-servlet:$jettyVersion"
        compile "org.eclipse.jetty.websocket:javax-websocket-server-impl:$jettyVersion"
        compile "org.eclipse.jetty.websocket:javax-websocket-client-impl:$jettyVersion"
        compile "org.eclipse.jetty:jetty-annotations:$jettyVersion"
        compile "org.eclipse.jetty:jetty-deploy:$jettyVersion"

        compile "io.undertow:undertow-core:$undertowVersion"
        compile "io.undertow:undertow-servlet:$undertowVersion"

        compile "org.apache.tomcat.embed:tomcat-embed-core:$tomcatVersion"
        compile "org.apache.tomcat.embed:tomcat-embed-websocket:$tomcatVersion"
        runtime "org.apache.tomcat.embed:tomcat-embed-logging-log4j:$tomcatVersion"
        runtime "org.apache.tomcat:tomcat-dbcp:$tomcatVersion"
    }
}

// Can't be done in separate files since srcFiles configuration is made resolved by the root javadoc task
project (':comsat-servlet') {    
    dependencies {
        srcFiles "javax.servlet:javax.servlet-api:$servletVersion:sources"
    }
}
project (':comsat-httpclient') {    
    dependencies {
        srcFiles ("org.apache.httpcomponents:httpasyncclient:$apacheAsyncClientVerstion:sources") {
            exclude group: 'org.apache.httpcomponents', module: 'httpclient'
        }
        srcFiles "org.apache.httpcomponents:httpclient:4.3.4:sources"
        srcFiles "org.apache.httpcomponents:httpcore:$apacheClientVersion:sources"
    }
}


/* project (':comsat-mongodb') {    
dependencies {
srcFiles "com.allanbank:mongodb-async-driver:$mongodbJavaAsyncDriverVersion:sources"
}
} */

// links are needed for javadoc external links. (eg. instead of javax.sql.DataSource link to DataSource)
ext.javadocLinks =  [
                "http://docs.oracle.com/javaee/7/api/",
                "http://hc.apache.org/httpcomponents-client-4.3.x/httpclient/apidocs/",
                "http://hc.apache.org/httpcomponents-asyncclient-4.0.x/httpasyncclient/apidocs/",
                "http://hc.apache.org/httpcomponents-core-4.3.x/httpcore/apidocs/",
                "http://square.github.io/retrofit/javadoc/",
                "http://jdbi.org/apidocs/",
                "http://www.jooq.org/javadoc/3.3.x/",
                "http://docs.oracle.com/javase/7/docs/api/",
                "http://puniverse.github.io/quasar/javadoc/",
                "http://docs.guava-libraries.googlecode.com/git-history/v17.0/javadoc/",
                "http://jersey.java.net/apidocs/latest/jersey/",
                "http://www.allanbank.com/mongodb-async-driver/apidocs/index.html"
]

ext.javadocExcludes = [
        "org/glassfish/jersey/server/internal/**",
        "co/paralleluniverse/comsat/webactors/servlet/WebActorEndpoint.java",
    //        "co/paralleluniverse/comsat/webactors/servlet/WebActorInitializer.java",
        "co/paralleluniverse/comsat/webactors/servlet/WebActorServlet.java",
]

// Rest of the subprojects common definitions 
subprojects {
    javadoc {
        source = files(subprojects.collect { project -> project.sourceSets.main.allJava })
        classpath = files(subprojects.collect { project -> project.sourceSets.main.compileClasspath })
        options {
            addStringOption('sourcepath', configurations.srcFiles.files.flatten().join(':'))
            docletpath = configurations.markdownDoclet.files.asType(List)
            doclet = 'ch.raffael.doclets.pegdown.PegdownDoclet'
            addStringOption("parse-timeout", "10")
            // stylesheetFile = rootProject.file('./baselib/javadoc.css')
            links = javadocLinks
        }
    }
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    } 
    
    ///////// Publish Artifacts 
    apply plugin: 'maven'
    apply plugin: 'signing'

    artifacts {
        archives jar
        archives sourcesJar
        archives javadocJar
    }

    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(
                    url: (isReleaseVersion ? 
	                        "https://oss.sonatype.org/service/local/staging/deploy/maven2" : 
	                        "https://oss.sonatype.org/content/repositories/snapshots")) {
                    // User and Password are taken from ~/.gradle/gradle.properties
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                } 
                pom.project {
                    name project.name
                    packaging 'jar'
                    description project.description
                    url project.url
                    scm {
                        url project.scmUrl
                        connection project.scmConnection
                        developerConnection project.scmConnection
                    } 
                    licenses {
                        license {
                            name project.licenseName1
                            url project.licenseUrl1
                            distribution 'repo'
                        }
                        license {
                            name project.licenseName2
                            url project.licenseUrl2
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'eitan'
                            name 'Eitan Yarden'
                        }
                    }
                }
            }
        }
    }	
}

configurations {
    markdownDoclet
}

dependencies {
    markdownDoclet "ch.raffael.pegdown-doclet:pegdown-doclet:1.1.1"
}

task javadoc(type: Javadoc) {
    title = "Comsat ${project(':comsat-actors-api').version}"
    destinationDir = file("docs/javadoc")
    source = files(subprojects.collect { project -> project.sourceSets.main.allJava })
    classpath = files(subprojects.collect { project -> project.sourceSets.main.compileClasspath })
    options {
        addStringOption('sourcepath', subprojects.configurations.srcFiles.files.flatten().join(':'))
        docletpath = configurations.markdownDoclet.files.asType(List)
        doclet = 'ch.raffael.doclets.pegdown.PegdownDoclet'
        addStringOption("parse-timeout", "10")
        // stylesheetFile = rootProject.file('./baselib/javadoc.css')
        links = javadocLinks
    }
    excludes = javadocExcludes
}

task clean(dependsOn: subprojects.clean) << {
    delete 'docs/javadoc'
}   

buildscript {
    repositories {
        mavenCentral()
        maven { url "https://raw.githubusercontent.com/ben-manes/gradle-versions-plugin/mvnrepo/" }
    }

    dependencies {
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.10.0'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.5-beta-5'
    }
} 

task wrapper(type: Wrapper) {
    gradleVersion = '1.11'
}

defaultTasks 'install'
