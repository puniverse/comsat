allprojects {
    configurations {
        markdownDoclet
    }

    repositories {
//        mavenLocal()
        mavenCentral()
    }

    dependencies {
        markdownDoclet "ch.raffael.pegdown-doclet:pegdown-doclet:1.1.1"
    }
}

subprojects {
    apply plugin: 'java'

    sourceCompatibility = '1.7'
    targetCompatibility = '1.7'

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    group               = "co.paralleluniverse"
    version             = "0.7.1-SNAPSHOT"
    status              = "integration"
    description         = "Fibers services for web"

    ext.url             = "http://puniverse.github.com/comsat"
    ext.vendor          = "Parallel Universe Software Co."
    ext.licenseName1    = "The GNU Lesser General Public License, version 3"
    ext.licenseUrl1     = "http://www.gnu.org/licenses/lgpl-3.0.txt"
    ext.licenseName2    = "Eclipse Public License - v 1.0"
    ext.licenseUrl2     = "http://www.eclipse.org/legal/epl-v10.html"
    ext.scmUrl          = "https://github.com/puniverse/comsat"
    ext.scmConnection   = "https://github.com/puniverse/comsat.git"

    ext.distDir         = "$buildDir/dist"

    ext.isRelease       = !version.endsWith("SNAPSHOT")

    ext.java8 = System.properties['java.version'].startsWith('1.8')

    ext.metricsVer      = '3.1.2'
    ext.asmVer          = '5.0.4'

    ext.quasarVer       = '0.7.6'

    ext.jettyVer        = '9.2.14.v20151106' // '9.3.x' requires JDK8
    ext.tomcatVer       = '8.0.33'
    ext.undertowVer     = '1.3.19.Final'
    ext.nettyVer        = '4.0.36.Final'

    ext.osgiVer         = '6.0.0'
    ext.jerseyVer       = '2.22.2'
    ext.hk2apiVer       = '2.4.0'
    ext.jerseyJettyVer  = '9.1.1.v20140108'

    ext.servletVer      = '3.0.1'
    ext.jaxrsVer        = '2.0.1'
    ext.websocketApiVer = '1.0'

    ext.dropwizardVer   = '0.9.2'
    ext.jdbiVer         = '2.72'

    ext.retrofitVer     = '1.9.0'
    ext.jooqJdk6Ver     = '3.6.4' // jOOQ versions >= 3.7 only support Java 8+
    ext.jooqJdk8Ver     = '3.9.0'
    ext.slf4jApiVer     = '1.7.21'
    ext.log4jVer        = '1.2.17'
    ext.guavaVer        = '19.0'

    ext.okhttpVer       = '2.6.0' // TODO Upgrade to 3.2.x

    ext.apacheAsyncClientVer   = '4.1.1'
    ext.httpCoreVer            = '4.4.4'
    ext.httpClientVer          = '4.5.2'

    ext.junitVer               = '4.12'
    ext.h2Ver                  = '1.4.191'

    ext.mongodbJavaAsyncDriverVer       = '2.0.1'
    ext.embedMongoVer                   = '1.47.0' // TODO Upgrade and troubleshoot

    // ext.bytemanVer = '3.0.1'

    // Spring projects
    ext.springSecurityVer               = '4.0.4.RELEASE'
    ext.springVer                       = '4.2.5.RELEASE'
    ext.springBootVer                   = '1.3.3.RELEASE' // TODO Port testsuite diffs

    ext.commonsLoggingVer               = '1.2'
    ext.commonsBeanUtilsVer             = '1.9.2'
    ext.commonsDigesterVer              = '2.1'
    ext.commonsCollectionsVer           = '3.2.2'
    ext.velocityVer                     = '1.7'
    ext.hamcrestVer                     = '1.3'
    ext.jqueryVer                       = '2.1.4'
    ext.snakeYamlVer                    = '1.16'
    ext.javaxELVer                      = '3.0.1-b05'
    ext.hibernateValidatorVer           = '5.2.2.Final'
    ext.jbossLoggingVer                 = '3.2.1.Final'

    ext.jstlVer                         = '1.2'
    ext.jolokiaVer                      = '1.3.2'
    ext.hsqlVer                         = '2.3.3'
    ext.bootstrapVer                    = '3.3.5'
    ext.hibernateVer                    = '4.3.11.Final'

    ext.kafkaClientsVer                 = '0.9.0.0' // ''0.8.2.2'
    ext.shiroVer                        = '1.2.4'

    configurations.all {
        resolutionStrategy {
            failOnVersionConflict()

            force "org.jdbi:jdbi:$jdbiVer"
            force "org.ow2.asm:asm:$asmVer"
            force "org.ow2.asm:asm-commons:$asmVer"
            force "io.dropwizard.metrics:metrics-core:$metricsVer"
            force "com.google.guava:guava:$guavaVer"
            force "org.slf4j:slf4j-api:$slf4jApiVer"
            force "org.apache.httpcomponents:httpcore:$httpCoreVer"
            force "org.apache.httpcomponents:httpclient:$httpClientVer"
            force "javax.servlet:javax.servlet-api:$servletVer"
            force "javax.ws.rs:javax.ws.rs-api:$jaxrsVer"
            force "org.glassfish.jersey.core:jersey-server:$jerseyVer"
            force "org.glassfish.jersey.core:jersey-client:$jerseyVer"
            force "org.glassfish.jersey.core:jersey-common:$jerseyVer"
            force "org.glassfish.jersey.containers:jersey-container-servlet-core:$jerseyVer"
            force "org.glassfish.hk2:hk2-api:$hk2apiVer"
            force "org.glassfish.hk2:hk2-locator:$hk2apiVer"
            force "org.glassfish.hk2.external:javax.inject:$hk2apiVer"

            // Spring projects, moving here since changing conf. in subprojects has been deprecated in Gradle 2.5
            force "org.springframework:spring-aop:$springVer"
            force "org.springframework:spring-beans:$springVer"
            force "org.springframework:spring-context:$springVer"
            force "org.springframework:spring-core:$springVer"
            force "org.springframework:spring-expression:$springVer"
            force "org.springframework:spring-web:$springVer"
            force "org.springframework:spring-webmvc:$springVer"
            force "org.springframework:spring-orm:$springVer"
            force "org.springframework:spring-jdbc:$springVer"
            force "org.springframework:spring-tx:$springVer"
            force "org.springframework.security:spring-security-config:$springSecurityVer"
            force "org.springframework.security:spring-security-web:$springSecurityVer"
            force "org.webjars:jquery:$jqueryVer"
            force "commons-beanutils:commons-beanutils:$commonsBeanUtilsVer"
            force "commons-digester:commons-digester:$commonsDigesterVer"
            force "commons-collections:commons-collections:$commonsCollectionsVer"
            force "org.jboss.logging:jboss-logging:$jbossLoggingVer"
            force "org.apache.velocity:velocity:$velocityVer"
            force "org.hamcrest:hamcrest-core:$hamcrestVer"

            force "org.glassfish:javax.el:$javaxELVer"
            force "org.apache.tomcat.embed:tomcat-embed-core:$tomcatVer"
            force "org.apache.tomcat.embed:tomcat-embed-el:$tomcatVer"
            force "org.hibernate:hibernate-validator:$hibernateValidatorVer"

            force "org.slf4j:jcl-over-slf4j:$slf4jApiVer"

            force "junit:junit:$junitVer"
        }
    }

    if (!project.hasProperty("sonatypeUsername") || !project.hasProperty("sonatypePassword")) {
        //        println "sonatype username or password not set"
        ext.sonatypeUsername = ""
        ext.sonatypePassword = ""
    }
    if (!project.hasProperty('mainClass')) { // must use project.hasProperty() rather than hasProperty in subprojects (gradle bug)
        ext.mainClass = ''
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/releases" }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        maven { url 'https://maven.java.net/content/repositories/snapshots' }
        maven { url 'http://www.allanbank.com/repo/' }
        maven { url 'http://repo.springsource.org/libs-milestone' }
    }

    configurations {
        quasar
        // byteman
        provided
        srcFiles
    }

    dependencies {
        compile "com.google.guava:guava:$guavaVer"
        quasar "co.paralleluniverse:quasar-core:$quasarVer@jar"
        // byteman "org.jboss.byteman:byteman:$bytemanVer@jar"
        testCompile "junit:junit:$junitVer"
        provided "co.paralleluniverse:quasar-core:$quasarVer"
        provided "javax.servlet:javax.servlet-api:$servletVer" // was 3.1.0
    }

    sourceSets {
        main.compileClasspath = main.compileClasspath + configurations.provided
        test.compileClasspath = test.compileClasspath + configurations.provided
        test.runtimeClasspath = test.runtimeClasspath + configurations.provided
    }

    defaultTasks 'install'

    classes {
        doFirst{
            println "Executing scanSuspendables..."
            ant.taskdef(
                name:'scanSuspendables', classname:'co.paralleluniverse.fibers.instrument.SuspendablesScanner',
                classpath: "build/classes/main:build/resources/main:${configurations.provided.asPath}:${configurations.runtime.asPath}")
            ant.scanSuspendables(
                auto:false,
                suspendablesFile: "$sourceSets.main.output.resourcesDir/META-INF/suspendables",
                supersFile: "$sourceSets.main.output.resourcesDir/META-INF/suspendable-supers",
                append: true) {
                fileset(dir: sourceSets.main.output.classesDir)
            }

            //            ant.taskdef(name:'scanSuspendables',
            //                classname:'co.paralleluniverse.fibers.instrument.OldSuspendablesScanner',
            //                classpath: "build/classes/main:${configurations.provided.asPath}:${configurations.runtime.asPath}")
            //            ant.scanSuspendables(outputFile:"$sourceSets.main.output.resourcesDir/META-INF/suspendable-supers",
            //                suspendablesFile: "$sourceSets.main.output.resourcesDir/META-INF/suspendables"
            //            ) {
            //                fileset(dir: sourceSets.main.output.classesDir)
            //            }
        }
    }

    tasks.withType(Test) {
        // systemProperty 'co.paralleluniverse.fibers.verifyInstrumentation', 'true'
        // systemProperty 'co.paralleluniverse.fibers.detectRunawayFibers', 'false'
        // systemProperty 'org.jboss.byteman.verbose', 'true'
        // systemProperty 'org.jboss.byteman.debug', 'true'
        jvmArgs "-javaagent:${configurations.quasar.singleFile}" // =v, =d, =c
                // , "-javaagent:${configurations.byteman.singleFile}=script:${projectDir}/script.btm"
    }

    test {
        beforeTest { desc ->
            logger.quiet("Running test: " + desc)
        }

        afterTest { desc, result ->
            if(result.resultType == TestResult.ResultType.FAILURE) {
                logger.quiet("Failed test ${desc.name} [${desc.className}] with exception: ${result.exception}")
                if(result.exception != null) {
                    result.exception.printStackTrace()
                }
            }
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    // Adds license header on each java file. gradle licenseMain for check or licenseFormatMain to apply
    apply plugin: 'license'
    license {
        ignoreFailures true
        header rootProject.file('LICENSE')
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
        strictCheck true
        skipExistingHeaders true
        mapping('java','SLASHSTAR_STYLE')
    }

    apply plugin: 'com.github.ben-manes.versions'

    //rest of the subprojects definition in the block after subproject specific definitions
}

// Per subproject Defintions
project (':comsat-actors-api') {
    dependencies {
        compile "co.paralleluniverse:quasar-actors:$quasarVer"
    }
}

project (':comsat-actors-netty') {
    dependencies {
        compile "io.netty:netty-all:$nettyVer"

        compile project (':comsat-actors-api')

        provided "co.paralleluniverse:quasar-core:$quasarVer"

        testCompile "javax.websocket:javax.websocket-api:$websocketApiVer"
        testCompile project(':comsat-test-utils')
    }
}

project (':comsat-actors-servlet') {
    dependencies {
        compile project (':comsat-actors-api')

        provided "javax.websocket:javax.websocket-api:$websocketApiVer"
        provided "javax.servlet:javax.servlet-api:$servletVer" // was 3.1.0

        provided "co.paralleluniverse:quasar-core:$quasarVer"

        testCompile project(':comsat-test-utils')
//        testRuntime "ch.qos.logback:logback-classic:1.1.3" // Exceeds Travis limit
    }
}

project (':comsat-actors-undertow') {
    dependencies {
        compile "io.undertow:undertow-core:$undertowVer"

        compile project (':comsat-actors-api')

        provided "co.paralleluniverse:quasar-core:$quasarVer"

        testCompile "javax.websocket:javax.websocket-api:$websocketApiVer"
        testCompile project(':comsat-test-utils')
    }
}

project (':comsat-dropwizard') {
    dependencies {
        testRuntime "com.h2database:h2:$h2Ver"
        compile "io.dropwizard:dropwizard-core:$dropwizardVer"
        compile "io.dropwizard:dropwizard-client:$dropwizardVer"
        compile "io.dropwizard:dropwizard-jdbi:$dropwizardVer"
        compile project(":comsat-servlet")
        compile (project(":comsat-httpclient")) {
            exclude group: 'org.apache.httpcomponents', module: 'httpclient'
        }
        compile project(":comsat-jdbi")
        provided "co.paralleluniverse:quasar-core:$quasarVer"
    }
}

project (':comsat-httpclient') {
    dependencies {
        compile "org.apache.httpcomponents:httpclient:$httpClientVer"
        compile ("org.apache.httpcomponents:httpasyncclient:$apacheAsyncClientVer") {
            exclude group: 'org.apache.httpcomponents', module: 'httpclient'
        }
        testCompile project(':comsat-test-utils')
    }
}

project (':comsat-jax-rs-client') {
    dependencies {
        compile "javax.ws.rs:javax.ws.rs-api:$jaxrsVer"
        compile "org.glassfish.jersey.core:jersey-client:$jerseyVer"
        compile "org.glassfish.jersey.connectors:jersey-jetty-connector:$jerseyVer"
        testCompile (project(':comsat-test-utils')) {
            exclude group: 'org.eclipse.jetty', module: '*'
        }
        testRuntime "org.eclipse.jetty:jetty-server:$jerseyJettyVer"
        testRuntime "org.eclipse.jetty:jetty-servlet:$jerseyJettyVer"
    }
}

project (':comsat-jdbc') {
    dependencies {
        testCompile project(':comsat-test-utils')
    }

    // AOT instrumentation in order to support jdbc in container
    compileJava {
        doLast {
            println("Instrumenting classes...")
            ant.taskdef(name:'instrumentation',
                classname:'co.paralleluniverse.fibers.instrument.InstrumentationTask',
                classpath: "build/classes/main:${configurations.provided.asPath}:${configurations.compile.asPath}")
            ant.instrumentation(verbose:'true', check:'true', debug:'true') {
                fileset(dir: sourceSets.main.output.classesDir) {
                    exclude(name: 'co/paralleluniverse/fibers/instrument/*.class')
                }
            }
        }
    }
}

project (':comsat-jdbi') {
    dependencies {
        compile "org.jdbi:jdbi:$jdbiVer"
        compile project (':comsat-jdbc')
        testCompile project(':comsat-test-utils')
    }
}

project (':comsat-jersey-server') {
    dependencies {
        compile project(':comsat-servlet')
        compile 'org.sonatype.sisu.inject:cglib:3.1.1' // instead of old cglib in jersey
        compile ("org.glassfish.jersey.containers:jersey-container-servlet:$jerseyVer") {
            exclude group: 'org.glassfish.hk2.external', module: 'cglib'
        }
        provided "org.osgi:org.osgi.core:$osgiVer"
        testCompile project(':comsat-test-utils')
    }
}

project (':comsat-jooq') {
    dependencies {
        compile "org.jooq:jooq:$jooqJdk6Ver"
        compile project (':comsat-jdbc')
        testCompile project(':comsat-test-utils')
    }
}

project (':comsat-mongodb-allanbank') {
    dependencies {
        compile "com.allanbank:mongodb-async-driver:$mongodbJavaAsyncDriverVer"
        testCompile "de.flapdoodle.embed:de.flapdoodle.embed.mongo:$embedMongoVer"
        testCompile project(':comsat-test-utils')
    }
}

project (':comsat-okhttp') {
    dependencies {
        compile "com.squareup.okhttp:okhttp:$okhttpVer"
        compile "com.squareup.okhttp:okhttp-urlconnection:$okhttpVer"
        compile "com.squareup.okhttp:okhttp-apache:$okhttpVer"
        compile project (':comsat-httpclient')
        testCompile "com.squareup.okhttp:mockwebserver:$okhttpVer"
    }
}

project (':comsat-kafka') {
    dependencies {
        compile "org.apache.kafka:kafka-clients:$kafkaClientsVer"
    }
}

project (':comsat-shiro') {
    dependencies {
        compile "org.apache.shiro:shiro-core:$shiroVer"
        testCompile "co.paralleluniverse:quasar-core:$quasarVer"
        testCompile "commons-logging:commons-logging:$commonsLoggingVer"
    }
}

project (':comsat-retrofit') {
    dependencies {
        compile "com.squareup.retrofit:retrofit:$retrofitVer"
        compile project (':comsat-httpclient')
        compile project (':comsat-okhttp')
        testCompile (project (':comsat-dropwizard')) {
            exclude group: 'org.jboss.logging', module: 'jboss-logging'
            exclude group: 'org.apache.httpcomponents', module: 'httpclient'
        }
        testCompile (project(':comsat-test-utils')) {
            exclude group: 'org.eclipse.jetty', module: '*'
            exclude group: 'org.apache.httpcomponents', module: 'httpclient'
            exclude group: 'org.apache.tomcat', module: 'tomcat-juli'
            //            exclude group: 'org.apache.tomcat', module: 'tomcat-dbcp'
        }
    }
}

project (':comsat-servlet') { // TODO Check seemingly harmless exceptions during tests
    dependencies {
        testRuntime "ch.qos.logback:logback-classic:1.1.3"
        testCompile project(':comsat-test-utils')
    }
}

project (':comsat-test-utils') {
    dependencies {
        compile "org.slf4j:slf4j-api:$slf4jApiVer"
        compile "org.apache.httpcomponents:httpclient:$httpClientVer"
        compile "com.h2database:h2:$h2Ver"
        compile "org.glassfish.jersey.core:jersey-client:$jerseyVer"
        compile "org.glassfish.jersey.media:jersey-media-sse:$jerseyVer"

        compile "org.eclipse.jetty:jetty-server:$jettyVer"
        compile "org.eclipse.jetty:jetty-servlet:$jettyVer"
        compile "org.eclipse.jetty.websocket:javax-websocket-server-impl:$jettyVer"
        compile "org.eclipse.jetty.websocket:javax-websocket-client-impl:$jettyVer"
        compile "org.eclipse.jetty:jetty-annotations:$jettyVer"
        compile "org.eclipse.jetty:jetty-deploy:$jettyVer"

        compile "io.undertow:undertow-core:$undertowVer"
        compile "io.undertow:undertow-servlet:$undertowVer"
        compile "io.undertow:undertow-websockets-jsr:$undertowVer"

        compile "org.apache.tomcat.embed:tomcat-embed-core:$tomcatVer"
        compile "org.apache.tomcat.embed:tomcat-embed-websocket:$tomcatVer"

        compile "junit:junit:$junitVer"

        provided "co.paralleluniverse:quasar-core:$quasarVer"
        provided "co.paralleluniverse:quasar-actors:$quasarVer"
        provided project (':comsat-actors-api')

        runtime "org.apache.tomcat.embed:tomcat-embed-logging-log4j:$tomcatVer"
        runtime "org.apache.tomcat:tomcat-dbcp:$tomcatVer"
    }
}

// Can't be done in separate files since srcFiles configuration is resolved by the root javadoc task
project (':comsat-servlet') {
    dependencies {
        srcFiles "javax.servlet:javax.servlet-api:$servletVer:sources"
    }
}

project (':comsat-httpclient') {
    dependencies {
        srcFiles ("org.apache.httpcomponents:httpasyncclient:$apacheAsyncClientVer:sources") {
            exclude group: 'org.apache.httpcomponents', module: 'httpclient'
        }
        srcFiles "org.apache.httpcomponents:httpclient:$httpClientVer:sources"
        // srcFiles "org.apache.httpcomponents:httpcore:$httpCoreVer:sources"
    }
}

/* project (':comsat-mongodb') {
dependencies {
srcFiles "com.allanbank:mongodb-async-driver:$mongodbJavaAsyncDriverVer:sources"
}
} */

// links are needed for javadoc external links. (eg. instead of javax.sql.DataSource link to DataSource)
ext.javadocLinks =  [
                "http://docs.oracle.com/javaee/7/api/",
                "http://hc.apache.org/httpcomponents-client-4.5.x/httpclient/apidocs/",
                "http://hc.apache.org/httpcomponents-asyncclient-4.1.x/httpasyncclient/apidocs/",
                "http://hc.apache.org/httpcomponents-core-4.4.x/httpcore/apidocs/",
                "http://square.github.io/retrofit/1.x/retrofit/",
                "http://jdbi.org/apidocs/",
                "http://www.jooq.org/javadoc/3.6.x/",
                "http://www.jooq.org/javadoc/latest/",
                "http://docs.oracle.com/javase/7/docs/api/",
                "http://puniverse.github.io/quasar/javadoc/",
                "http://google.github.io/guava/releases/19.0/api/docs/",
                "http://jersey.java.net/apidocs/latest/jersey/",
                "http://www.allanbank.com/mongodb-async-driver/apidocs/",
                "http://docs.spring.io/spring/docs/current/javadoc-api/",
                "http://docs.spring.io/spring-boot/docs/current/api/",
                "http://docs.spring.io/autorepo/docs/spring-security/current/apidocs/",
                "http://square.github.io/okhttp/2.x/okhttp/",
                "http://undertow.io/javadoc/1.3.x/",
                "http://netty.io/4.0/api/"
]

ext.javadocExcludes = [
        "org/glassfish/jersey/server/internal/**",
        "co/paralleluniverse/comsat/webactors/servlet/WebActorEndpoint.java",
    //        "co/paralleluniverse/comsat/webactors/servlet/WebActorInitializer.java",
        "co/paralleluniverse/comsat/webactors/servlet/WebActorServlet.java",
        "co/paralleluniverse/comsat/webactors/netty/WebActorHandler.java",
        "co/paralleluniverse/comsat/webactors/netty/AutoWebActorHandler.java",
        "co/paralleluniverse/comsat/webactors/undertow/WebActorHandler.java",
        "co/paralleluniverse/comsat/webactors/undertow/AutoActorHandler.java",
]

// Rest of the subprojects common definitions
subprojects {
    javadoc {
        source = files(subprojects.collect { project -> project.sourceSets.main.allJava })
        classpath = files(subprojects.collect { project -> project.sourceSets.main.compileClasspath })
        options {
            addStringOption('sourcepath', configurations.srcFiles.files.flatten().join(':'))
            docletpath = configurations.markdownDoclet.files.asType(List)
            doclet = 'ch.raffael.doclets.pegdown.PegdownDoclet'
            addStringOption("parse-timeout", "10")
            // stylesheetFile = rootProject.file('./baselib/javadoc.css')
            links = javadocLinks
        }
    }
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    ///////// Publish Artifacts
    apply plugin: 'maven'
    apply plugin: 'signing'

    artifacts {
        archives jar
        archives sourcesJar
        archives javadocJar
    }

    signing {
        required { isRelease && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(
                    url: (isRelease ?
                            "https://oss.sonatype.org/service/local/staging/deploy/maven2" :
                            "https://oss.sonatype.org/content/repositories/snapshots")) {
                    // User and Password are taken from ~/.gradle/gradle.properties
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }
                pom.project {
                    name project.name
                    packaging 'jar'
                    description project.description
                    url project.url
                    scm {
                        url project.scmUrl
                        connection project.scmConnection
                        developerConnection project.scmConnection
                    }
                    licenses {
                        license {
                            name project.licenseName1
                            url project.licenseUrl1
                            distribution 'repo'
                        }
                        license {
                            name project.licenseName2
                            url project.licenseUrl2
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'eitan'
                            name 'Eitan Yarden'
                        }
                    }
                }
            }
        }
    }
}

task javadoc(type: Javadoc) {
    title = "Comsat ${project(':comsat-actors-api').version}"
    destinationDir = file("docs/javadoc")
    source = files(subprojects.collect { project -> project.sourceSets.main.allJava })
    classpath = files(subprojects.collect { project -> project.sourceSets.main.compileClasspath })
    options {
        addStringOption('sourcepath', subprojects.configurations.srcFiles.files.flatten().join(':'))
        docletpath = configurations.markdownDoclet.files.asType(List)
        doclet = 'ch.raffael.doclets.pegdown.PegdownDoclet'
        addStringOption("parse-timeout", "10")
        // stylesheetFile = rootProject.file('./baselib/javadoc.css')
        links = javadocLinks
    }
    excludes = javadocExcludes
}

task clean(dependsOn: subprojects.clean) << {
    delete 'docs/javadoc'
}

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.10.0'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.6'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.0'
    }
}

defaultTasks 'install'
